{
    "name": "CircuitBreaker",
    "title": "@CircuitBreaker for Fault Tolerance",
    "description": "Build a fault tolerant microservice ...",
    "duration": "10 minutes",
    "audience": "developer",
    "repo": "https://github.com/steven1046/openliberty",
    "steps": [
        {
            "name": "Intro",
            "title": "Introduction",
            "description": ["It is important to build microservices to be fault tolerant for resilience against failure. Fault tolerance is about using different strategies to ensure reduced impact and continued operation of services in the event of failure. <a href='https://microprofile.io/' target='_blank'>MicroProfile</a> makes this very simple with their fault tolerance feature.<br>",
            "In this guide, we will introduce the circuit breaker and fallback concepts and show how to implement them using the MicroProfile fault tolerance feature.<br>"
            ],
            "displayType": "none"
        },
        {
          "name": "Background",
          "title": "Background Concepts",
          "description": ["We will use MicroProfile's <b>CircuitBreaker</b> and <b>Fallback</b> policies for our fault tolerance implementation.<br>",
          "<b>Microservice</b> is an architecture that structures an application loosely from other services so it is independent and modular.<br>",
          "<h4><b><u>Circuit Breaker</u></b></h4>",
          "The circuit breaker design pattern allows your microservice to fail immediately to prevent repeated executions that are likely to fail.<br>",
          "The software circuit breaker operates much like an electrical circuit breaker. A <b>closed</b> circuit represents a fully functional system, and an <b>open</b> circuit represents an incomplete system. In the event of failure, the circuit breaker triggers to open the circuit, removing the point of failure from the system.<br>",
          "In a software circuit breaker, there is an additional <b>half-open</b> state. Once the circuit is opened, it will periodically transition to the half-open state, where it will check if the failed component is restored and close the circuit once it is considered safe and functional.<br>",
          "<h4><b><u>Fallback</u></b></h4>",
          "A fallback service runs when the main service fails. When used in conjunction with other fault tolerant design patterns, a fallback can provide graceful failure or continued or partial operation of the original service.<br>",
          "In our example, we will use a fallback with a circuit breaker. When the circuit breaker opens, subsequent requests for the service will be immediately routed to the fallback service until the main service is restored."
          ],
          "displayType": "none"
        },
        {
            "name": "Scenario",
            "title": "Example: Bank Scenario",
            "description": [
                "Imagine that your online banking application has many different microservices:",
                "<ul style='list-style: none;'><li>a service for checking your balance<li>a service for transferring money<li>a service for depositing money<li>a balance snapshot service used as a backup of data</ul>On the next step, you will try to check your balance on the bank's website."
            ],
            "content": [
              {
                "displayType":"pod",
                "content": "<div><img src='../../../guides/openliberty/src/main/content/html/interactive-guides/circuit-breaker/images/BankScenario.png' alt='Online Banking Microservices' max-width='100%'></div>"
              }
            ],
            "steps": [
                {
                    "name": "CheckBalance",
                    "title": "Check Your Balance",
                    "description": [
                      "Visit your bank's website to check your current balance before heading out for a night on the town.</br>"
                    ],
                    "instruction": [
                      "Enter the following url into the browser below, or click <action tabindex='0' role='button' title='url' aria-label='url' onkeypress=\"circuitBreakerCallBack.populate_url('CheckBalance')\" onclick=\"circuitBreakerCallBack.populate_url('CheckBalance')\"><b>https://global-ebank.com/checkBalance</b></action> and then press <action tabindex='0' role='button' title='Enter' aria-label='Enter' onkeypress=\"circuitBreakerCallBack.enterButtonURLCheckBalance('CheckBalance')\" onclick=\"circuitBreakerCallBack.enterButtonURLCheckBalance('CheckBalance')\"><b>Enter</b></action>."
                    ],
                    "content":[
                      {
                        "displayType":"webBrowser",
                        "url": "",
                        "browserContent": "",
                        "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                      },
                      {
                        "displayType":"pod"
                      }
                    ]
                }
            ]
        },
        {
            "name": "AddLibertyMPFaultTolerance",
            "title": "Enabling MicroProfile Fault Tolerance",
            "description": [
                "Begin by enabling the MicroProfile Fault Tolerance 1.0 feature in your server.xml file.  This feature provides an environment to support resilient microservices through patterns that include circuit breakers and fallbacks."
            ],
            "instruction": [
              "Add the following element declaration inside the featureManager element to the server.xml file, or click: <action tabindex='0' role='button' title='Enable MicroProfile Fault Tolerance' aria-label='Enable MicroProfile Fault Tolerance' onkeypress=\"circuitBreakerCallBack.addMicroProfileFaultToleranceFeature()\" onclick=\"circuitBreakerCallBack.addMicroProfileFaultToleranceFeature()\"><b>&lt;feature>mpFaultTolerance-1.0&lt;/feature&gt;</b></action> and then click the <action tabindex='0' role='button' title='save button' aria-label='Save button' onkeypress=\"circuitBreakerCallBack.saveServerXML()\" onclick=\"circuitBreakerCallBack.saveServerXML()\"><b>Save button</b></action> on the upper left of the editor menu pane."
            ],
            "content": [
              {
                "displayType": "fileEditor",
                "fileName": "server.xml",
                "preload": [
                  "<?xml version=\"1.0\"?>",
                  "<server description=\"Sample Liberty server\">",
                  "   <featureManager>",
                  "      <feature>cdi-1.2</feature>",
                  "   </featureManager>",
                  "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\" httpPort=\"{default.http.port}\"/>",
                  "</server>"
                ],
                "save": true,
                "readonly": [
                    {
                        "from": "1",
                        "to": "3"
                    },
                    {
                        "from": "5",
                        "to": "7"
                    }
                ],
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForFeatureInServerXML(editor); })"
              }
            ]
        } ,
        {
            "name": "AfterAddCircuitBreakerAnnotation",
            "title": "Add @CircuitBreaker Annotation",
            "description": [
                "Let us add a default @CircuitBreaker policy to the Check Balance microservice."
            ],
            "instruction": [
              "Add the @CircuitBreaker annotation on line 6, above the Check Balance service, or click: <action tabindex='0' role='button' title='Circuit breaker annotation' aria-label='Circuit breaker annotation' onkeypress=\"circuitBreakerCallBack.addCircuitBreakerAnnotation('AfterAddCircuitBreakerAnnotation')\" onclick=\"circuitBreakerCallBack.addCircuitBreakerAnnotation('AfterAddCircuitBreakerAnnotation')\"><b>@CircuitBreaker()</b></action> and then click the <action tabindex='0' role='button' title='save button' aria-label='Save button' onkeypress=\"circuitBreakerCallBack.saveButtonEditor('AfterAddCircuitBreakerAnnotation')\" onclick=\"circuitBreakerCallBack.saveButtonEditor('AfterAddCircuitBreakerAnnotation')\"><b>Save button</b></action> on the upper left of the editor menu pane."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package global.eBank.microservices;",
                    "import org.eclipse.microprofile.faulttolerance.CircuitBreaker;",
                    "import org.eclipse.microprofile.faulttolerance.exceptions.*;",
                    "",
                    "public class BankService {",
                    "",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return checkBalanceService();",
                    "    }",
                    "}"
                ],
                "readonly": [
                  {
                      "from": "1",
                      "to": "5"
                  },
                  {
                      "from": "7",
                      "to": "11"
                  }
                ],
                "save": true,
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForCircuitBreakerAnnotation(editor); })"
              },
              {
                "displayType":"pod",
                "content": "<img src='../../../guides/openliberty/src/main/content/html/interactive-guides/circuit-breaker/images/check_balance_service.png' alt='check balance microservice'>"
              }
            ],
            "steps": [
              {
              "name": "ConfigureFailureThresholdParams",
              "title": "Configure Failure Threshold",
                    "browserContent": "circuit-breaker/check-balance-fail-with-open-circuit.html",
              "description":
              [
                "The CircuitBreaker policy opens the circuit when sufficient calls to the microservice fail. The policy determines the failure threshold by looking at the latest requests to the service, also known as a <b>rolling window</b>. You can modify this failure threshold by using these two parameters:<br/>",
                "<ul><li><b>requestVolumeThreshold:</b> The size of the rolling window used to determine the failure threshold. The default is 20.",
                "<li><b>failureRatio:</b> The minimum failure ratio in the rolling window to trigger the circuit breaker. The default is 0.5.",
                "</ul>",
                "The failureRatio is used in conjunction with the requestVolumeThreshold to determine when the circuit will trip. The total requests must be equal to or greater than the rolling window before the circuit breaker can trigger.",
                "For example, with a requestVolumeThreshold of 20 and failureRatio of 0.5, the circuit breaker will require a minimum of 20 total requests with at least 10 failures in the latest 20 requests to open the circuit."
              ],
              "instruction": [
                "Change the @CircuitBreaker annotation on line 7 to the following, or click:<br><action tabindex='0' role='button' title='Circuit breaker annotation with failure threshold parameters' aria-label='Circuit breaker annotation with failure threshold parameters' onkeypress=\"circuitBreakerCallBack.addCircuitBreakerAnnotation('ConfigureFailureThresholdParams')\" onclick=\"circuitBreakerCallBack.addCircuitBreakerAnnotation('ConfigureFailureThresholdParams')\"><b>@CircuitBreaker\n(requestVolumeThreshold=2, failureRatio=0.5)</b></action><br>and then click the <action tabindex='0' role='button' title='run button'  aria-label='run button' onkeypress=\"circuitBreakerCallBack.saveButtonEditor('ConfigureFailureThresholdParams')\" onclick=\"circuitBreakerCallBack.saveButtonEditor('ConfigureFailureThresholdParams')\"><b>Run button</b></action> on the upper right of the editor menu pane.</instruction>",
                "Click on the <action tabindex='0' role='button' title='refresh button' aria-label='refresh' onkeypress=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureFailureThresholdParams')\" onclick=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureFailureThresholdParams')\"><b>refresh</b></action> in the browser below to see the first Check Balance call fail in the closed circuit state.",
                "Click on the <action tabindex='0' role='button' title='refresh button' aria-label='refresh' onkeypress=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureFailureThresholdParams')\" onclick=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureFailureThresholdParams')\"><b>refresh</b></action> again in the browser to see the second fail call changes the circuit to open state."
              ],
              "content":
              [
                {
                  "displayType": "pod",
                  "content": "circuit-breaker/configure-threshold-tabs.html"
                }
              ]
              },
              {
                "name": "ConfigureDelayParams",
                "title": "Configure Delay",
                "description": [
                    "By default, the circuit will remain open for 5000 ms. During this period, all requests to the main service will be blocked and will fail immediately. At the end of this period, the circuit will transition to the half-open state and check if the main service is healthy. This time period can be configured with the delay parameter.",
                    "<br/><ul><li><b>delay:</b> The delay in milliseconds after the circuit opens until checking the main service's availability.</li></ul>"
                ],
                "instruction": [
                  "Change the @CircuitBreaker annotation on lines 7-8 to, or click:<br><action tabindex='0' role='button' title='Circuit breaker annotation with delay parameter' aria-label='Circuit breaker annotation with delay parameter' onkeypress=\"circuitBreakerCallBack.addCircuitBreakerAnnotation('ConfigureDelayParams')\" onclick=\"circuitBreakerCallBack.addCircuitBreakerAnnotation('ConfigureDelayParams')\"><b>@CircuitBreaker\n(requestVolumeThreshold=2, failureRatio=0.5, delay=5000)</b></action><br>and then click the <action tabindex='0' role='button' title='run button' aria-label='run button' onkeypress=\"circuitBreakerCallBack.saveButtonEditor('ConfigureDelayParams')\" onclick=\"circuitBreakerCallBack.saveButtonEditor('ConfigureDelayParams')\"><b>Run button</b></action>.</instruction>",
                  "Click on the <action tabindex='0' role='button' title='Refresh button' aria-label='Refresh button' onkeypress=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureDelayParams')\" onclick=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureDelayParams')\"><b>Refresh button</b></action> in the browser below to see how the above annotation affects the Check Balance call."
                ],
                "content": [
                  {
                    "displayType": "pod",
                    "content": "circuit-breaker/configure-delay-tabs.html"
                  }
                ]
            },
            {
              "name": "ConfigureSuccessThresholdParams",
              "title": "Configure Success Threshold",
              "description": [
                  "When the circuit is half-open, requests to the microservice are allowed through. However, if a request should fail while the circuit is half-open, the request will immediately fail and the circuit will return to an open state. Otherwise, if a specified number of consecutive requests succeed, the microservice is deemed healthy and the circuit will close.",
                  "The default number of consecutive successes needed is 1, and can be adjusted with the successThreshold parameter.",
                  "<br/><ul><li><b>successThreshold:</b> The number of consecutive successful invocations of the service required before closing the circuit.</ul>"
              ],
              "instruction": [
                "Change the @CircuitBreaker annotation on lines 7-9 to, or click:<action tabindex='0' role='button' title='Circuit breaker annotation with success threshold parameter' aria-label='Circuit breaker annotation with success threshold parameter' onkeypress=\"circuitBreakerCallBack.addCircuitBreakerAnnotation('ConfigureSuccessThresholdParams')\" onclick=\"circuitBreakerCallBack.addCircuitBreakerAnnotation('ConfigureSuccessThresholdParams')\"><b>@CircuitBreaker\n(requestVolumeThreshold=2, failureRatio=0.5, delay=5000, successThreshold=2)</b></action><br>and then click the <action tabindex='0' role='button' title='run button' aria-label='run button' onkeypress=\"circuitBreakerCallBack.saveButtonEditor('ConfigureSuccessThresholdParams')\" onclick=\"circuitBreakerCallBack.saveButtonEditor('ConfigureSuccessThresholdParams')\"><b>Run button</b></action>.</instruction>",
                "Click the <action tabindex='0' role='button' title='Refresh button' aria-label='Refresh button' onkeypress=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureSuccessThresholdParams')\" onclick=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureSuccessThresholdParams')\"><b>Refresh button</b></action> in the browser below to see the first Check Balance call succeed in the half-open circuit state.<br>",
                "Click the <action tabindex='0' role='button' title='Refresh button' aria-label='Refresh button' onkeypress=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureSuccessThresholdParams')\" onclick=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureSuccessThresholdParams')\"><b>Refresh button</b></action> in the browser again. This second successful call meets our success threshold and closes the circuit."
              ],
              "content":[
                {
                  "displayType": "pod",
                  "content": "circuit-breaker/configure-success-threshold-tabs.html"
                }
              ]
            }
          ]
        },
        {
            "name": "AddFallBack",
            "title": "Add @Fallback Annotation",
            "description": [
              "We will use the @Fallback annotation to add a method that will execute when the Check Balance microservice fails. Our fallback method will invoke the bank's Balance Snapshot microservice to return a cached value of the user's balance."
            ],
            "instruction": [
              "To identify the fallback method, add the following annotation to line 6 above the @CircuitBreaker annotation, or click: <action tabindex='0' role='button' title='fallback annotation' aria-label='fallback annotation' onkeypress=\"circuitBreakerCallBack.addFallbackAnnotation('AddFallBack')\" onclick=\"circuitBreakerCallBack.addFallbackAnnotation('AddFallBack')\"><b>@Fallback (fallbackMethod = \"fallbackService\")</b></action>and add the fallback method to the bottom of the class, or click: <br><action tabindex='0' role='button' title='fallback method' aria-label='fallback method' onkeypress=\"circuitBreakerCallBack.addFallbackMethod('AddFallBack')\" onclick=\"circuitBreakerCallBack.addFallbackMethod('AddFallBack')\"><b>private Service fallbackService() {\n      return balanceSnapshotService();\n}</b></action></br><note>Note that the fallback method must accept the same arguments and have the same return type as the original method.</note><br/>Click the <action tabindex='0' role='button' title='Save' aria-label='Save' onkeypress=\"circuitBreakerCallBack.saveButtonEditor('AddFallBack')\" onclick=\"circuitBreakerCallBack.saveButtonEditor('AddFallBack')\"><b>Save button</b></action> on the upper left of the editor menu pane."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                  "package global.eBank.microservices;",
                  "import org.eclipse.microprofile.faulttolerance.CircuitBreaker;",
                  "import org.eclipse.microprofile.faulttolerance.exceptions.*;",
                  "",
                  "public class BankService {",
                  "",
                  "    @CircuitBreaker(requestVolumeThreshold=2,",
                  "                    failureRatio=0.5,",
                  "                    delay=5000)",
                  "    public Service checkBalance() {",
                  "        counterForInvokingBankingService++;",
                  "        return checkBalanceService();",
                  "    }",
                  "}"
                ],
                "readonly": "false",
                "save": true,
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForFallbackAnnotation(editor); })"
              },
              {
                "displayType":"pod"
              }
            ],
            "steps": [
              {
                "name": "fallbackService",
                "title": "Check Balance with Fallback",
                "description": [
                  "When the circuit is in an open state, the bank's Check Balance microservice fails right away and the fallback service is executed. The circuit will transition to a half-open state after the specified delay."
                ],
                "instruction": [
                  "Click on the <action tabindex='0' role='button' title='Refresh' aria-label='Refresh' onkeypress=\"circuitBreakerCallBack.refreshButtonBrowser('fallbackService')\" onclick=\"circuitBreakerCallBack.refreshButtonBrowser('fallbackService')\"><b>refresh button</b></action> in the browser below to see the fallback method immediately invoked when the circuit is open.<br/>"
                ],
                "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "https://global-ebank.com/checkBalance",
                    "browserContent": "circuit-breaker/check-balance-fail-with-open-circuit.html",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFallbackSuccessBalance(webBrowser); })"
                  },
                  {
                      "displayType":"pod"
                  }
                ]
            }
            ]
        },
        {
            "name": "playground",
            "title": "Circuit Breaker Demo",
            "description": [
              "Now that you have learned about circuit breakers and fallbacks, you can explore the parameters in the @CircuitBreaker annotation and see the circuit in action.",
              "Here is a recap of the parameters:",
              "<ul>",
              "<li><b>requestVolumeThreshold</b>: The size of the rolling window used to determine the failure threshold. The default is 20.",
              "<li><b>failureRatio</b>: The minimum failure ratio in the rolling window to trigger the circuit breaker. The default is 0.5.",
              "<li><b>delay</b>: The delay in milliseconds to transition to a half-open state after the circuit is open. The default is 5000ms.",
              "<li><b>successThreshold</b>: The number of consecutive successful invocations of the service required before closing the circuit. The default is 1.",
              "</ul>"
            ],
            "instruction": [
              "<b>Modify the @CircuitBreaker parameters</b> and <b>save the file</b> in the editor to configure your circuit breaker.<br>You can simulate successful or failed requests to the microservice to see how the circuit state changes.<br>You can modify the @CircuitBreaker annotation and click save at any time to reset the circuit breaker."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package global.eBank.microservices;",
                    "import org.eclipse.microprofile.faulttolerance.CircuitBreaker;",
                    "import org.eclipse.microprofile.faulttolerance.exceptions.*;",
                    "",
                    "public class BankService {",
                    "",
                    "    @CircuitBreaker(requestVolumeThreshold=2,",
                    "                     failureRatio=0.5,",
                    "                     delay=5000,",
                    "                     successThreshold=2)",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return BankingService();",
                    "    }",
                    "}"
                ],
                "readonly": [
                    {
                        "from": "1",
                        "to": "6"
                    },
                    {
                        "from": "11",
                        "to": "15"
                    }
                ],
                  "save": true,
                  "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForCircuitBreakerAnnotationChanges(editor); })"
                },
                {
                  "displayType":"pod",
                  "content": "circuit-breaker/circuit-breaker-playground.html",
                  "callback": "(function(pod) {circuitBreakerCallBack.createCircuitBreaker(pod, 'playground', 2, 0.5, 5000, 2)})"
                }
              ]
        },
        {
            "name": "WhatNext",
            "title": "What's Next",
            "description": "Congratulations, you have learned how to use a circuit breaker and provide a fallback to make your microservice fault tolerant."
        }
    ]
}
