{
    "name": "CircuitBreaker",
    "title": "@CircuitBreaker for Fault Tolerance",
    "description": "Build a fault tolerant microservice ...",
    "duration": "10 minutes",
    "audience": "developer",
    "steps": [
        {
            "name": "Intro",
            "title": "Introduction",
            "description": ["It is important to build microservices to be fault tolerant for resilience against failure. Fault tolerance is about using different strategies to ensure reduced impact and continued operation of services in the event of failure. <a href='https://microprofile.io/' target='_blank'>MicroProfile</a> makes this very simple with their fault tolerance feature.<br>",
            "In this guide, we will introduce the circuit breaker and fallback concepts and show how to implement them using the MicroProfile fault tolerance feature.<br>"
            ],
            "instruction": ["To get started, add the <b>mpFaultTolerance-1.0</b> feature to your server.xml.<br><pre>&lt;featureManager&gt;<br>\t&lt;feature&gt;mpFaultTolerance-1.0&lt;/feature&gt;<br>&lt;/featureManager&gt;</pre>"
            ],
            "displayType": "none"
        },
        {
          "name": "Background",
          "title": "Background Concepts",
          "description": ["We will be using MicroProfile's <b>CircuitBreaker</b> and <b>Fallback</b> policies for our fault tolerance implementation.<br>",
          "<b>CircuitBreaker</b> allows us to fail fast by automatically failing executions to prevent system overload, indefinite wait, or client timeout.",
          "<b>Fallback</b> provides an alternate solution for the failed execution.",
          "<b>Microservice</b> is an architecture that structures an application loosely from other services so it is independent and modular."
          ],
          "displayType": "none",
          "steps": [
            {
              "name": "CircuitBreaker",
              "title": "Circuit Breaker",
              "description": [
                  "The circuit breaker design pattern allows your microservice to fail immediately to prevent repeated executions that are likely to fail.<br>",
                  "The software circuit breaker operates much like an electrical circuit breaker. A <b>closed</b> circuit represents a fully functional system, and an <b>open</b> circuit represents an incomplete system. In the event of failure, the circuit breaker triggers to open the circuit, removing the point of failure from the system.<br>",
                  "In a software circuit breaker, there is an additional <b>half-open</b> state. Once the circuit is opened, it will periodically transition to the half-open state, where it will check if the failed component is restored and close the circuit once it is considered safe and functional."
                ],
                "content": [
                  {
                    "displayType":"pod",
                    "content": "../../../html/interactive-guides/circuit-breaker/circuit-breaker-state-diagram.html"
                  }
                ]
            },
            {
              "name": "Fallback",
              "title": "Fallback",
              "description": [
                "A fallback service runs when the main service fails. When used in conjunction with other fault tolerant design patterns, a fallback can provide graceful failure or continued or partial operation of the original service.<br>",
                "In our example, we will be using a fallback with a circuit breaker. When the main service fails and triggers the circuit breaker to open the circuit, subsequent requests for the service will be routed to the fallback service until the main service is restored."
              ]
            }
          ]
        },
        {
            "name": "Scenario",
            "title": "Example: Bank Scenario",
            "description": [
                "Imagine that your online banking application has many different microservices:",
                "<ul style='list-style: none;'><li>a service for checking your balance<li>a service for transferring money<li>a service for depositing money<li>a balance snapshot service used as a backup of data</ul>On the next step, you will try to check your balance on the bank's website."
            ],
            "content": [
              {
                "displayType":"pod",
                "content": "<div><img src='../../../html/interactive-guides/circuit-breaker/images/BankScenario.png' alt='Online Banking Microservices' width='600' height='200'></div>"
              }
            ],
            "steps": [
                {
                    "name": "CheckBalance",
                    "title": "Check Your Balance",
                    "description": [
                      "Visit your bank's website to check your current balance before heading out for a night on the town.</br>"
                    ],
                    "instruction": [
                      "Enter the following url into the browser below, or click<br> <action name='url' callback=\"circuitBreakerCallBack.populate_url('CheckBalance')\"><b>https://global-ebank.com/checkBalance</b></action>",
                      "and press <action name='Enter' callback=\"circuitBreakerCallBack.enterButtonURLCheckBalance('CheckBalance')\"><b>Enter</b></action>."
                    ],
                    "content":[
                      {
                        "displayType":"webBrowser",
                        "url": "",
                        "browserContent": "",
                        "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                      },
                      {
                        "displayType":"pod"
                      }
                    ]
                }
            ]
        },
        {
            "name": "AfterAddCircuitBreakerAnnotation",
            "title": "Add @CircuitBreaker Annotation",
            "description": [
                "Let us add a default @CircuitBreaker policy to the Check Balance microservice."
            ],
            "instruction": [
              "<br/>Add the @CircuitBreaker annotation on line 6, above the Check Balance service: <action name='Circuit breaker annotation' callback=\"circuitBreakerCallBack.addCircuitBreakerAnnotation('AfterAddCircuitBreakerAnnotation')\"><b>@CircuitBreaker()</b></action>",
              "<br/>Click the <action name='save button' callback=\"circuitBreakerCallBack.saveButtonEditor('AfterAddCircuitBreakerAnnotation')\"><b>save button</b></action> on the upper left of the editor menu pane."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package com.ibm.websphere.restexamples;",
                    "import javax.ws.rs.GET;",
                    "import javax.ws.rs.Path;",
                    "",
                    "public class BankService {",
                    "",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return checkBalanceService();",
                    "    }",
                    "}"
                ],
                "readonly": false,
                "save": true,
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForCircuitBreakerAnnotation(editor); })"
              },
              {
                "displayType":"pod",
                "content": "<img src='../../../html/interactive-guides/circuit-breaker/images/check_balance_service.png' alt='check balance microservice'>"
              }
            ],
            "steps": [
              {
                "name": "ConfigureFailureThresholdParams",
                "title": "Configure Failure Threshold",
                "description": [
                  "The CircuitBreaker policy opens the circuit when sufficient calls to the microservice fail. The policy determines the failure threshold by looking at the latest requests to the service, also known as a <b>rolling window</b>. You can modify this failure threshold by using these two parameters:<br/>",
                  "<ul><li><b>requestVolumeThreshold:</b> The size of the rolling window used to determine the failure threshold. The default is 20.",
                  "<li><b>failureRatio:</b> The minimum failure ratio in the rolling window to trigger the circuit breaker. The default is 0.5.",
                  "</ul>",
                  "The failureRatio is used in conjunction with the requestVolumeThreshold to determine when the circuit will trip. For example, if the requestVolumeThreshold is 20 and the failureRatio is 0.5, 10 failures in a rolling window of 20 requests will trigger the circuit to open.",
                  "<br/>Suppose we change the default @CircuitBreaker annotation to",
                  "<samp>@CircuitBreaker(<b>requestVolumeThreshold=8, failureRatio=0.25</b>)</samp><br/>"
                ],
                "instruction": [
                  "Click on the <action name='refresh' callback=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureFailureThresholdParams')\"><b>refresh</b></action> in the browser below to see the first Check Balance call fail in the closed circuit state.",
                  "Click on the <action name='refresh' callback=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureFailureThresholdParams')\"><b>refresh</b></action> again in the browser to see the second fail call changes the circuit to open state."
                ],
                "content":[
                  {
                    "displayType": "pod",
                    "content": "<instruction id='editorInstruction' style='float:left'>Change the default @CircuitBreaker annotation to <br/><action>@CircuitBreaker(<b>requestVolumeThreshold=8,<br/>    failureRatio=0.25</b>)</action><br/>Click the <action tabindex='0' title='Save' role='button' aria-label='save' onclick=\"circuitBreakerCallBack.saveButtonEditor('ConfigureFailureThresholdParams')\"><b>save button</b></action>.</instruction><br/> <instruction id='browserInstruction' style='margin-left: 20px; vertical-align: top';' class='semiTransparent'>Click on the <action tabindex='0' title='Refresh' role='button' aria-label='refresh' onclick=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureFailureThresholdParams')\"><b>refresh button</b></action> in the browser below.<br/>Click on the <action tabindex='0' title='Refresh' role='button' aria-label='refresh' onclick=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureFailureThresholdParams')\"><b>refresh button</b></action> again in the browser.</instruction>",
                    "size": "100%"
                  },
                  {
                    "displayType": "fileEditor",
                    "fileName": "BankService.java",
                    "size": "50%",
                    "preload": [
                        "package com.ibm.websphere.restexamples;",
                        "import javax.ws.rs.GET;",
                        "import javax.ws.rs.Path;",
                        "",
                        "public class BankService {",
                        "",
                        "    @CircuitBreaker()",
                        "    public Service checkBalance() {",
                        "        counterForInvokingBankingService++;",
                        "        return checkBalanceService();",
                        "    }",
                        "}"
                        ],
                    "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForFailureThresholdParams(editor); })"
                  },
                  {
                    "displayType":"pod",
                    "size": "10%",
                    "content": "<div class='innerPod'> <button id='ConfigureFailureThresholdParams-arrow' class='arrow arrowRight btn btn-default btn-lg' aria-label='Next'><span class='glyphicon glyphicon-chevron-right'></span></button></div>",
                    "callback": "(function test(pod) {circuitBreakerCallBack.listenToFailureThresholdArrow(pod); })"
                  },
                  {
                    "displayType":"webBrowser",
                    "url": "https://global-ebank.com/checkBalance",
                    "size": "50%",
                    "browserContent": "../../../html/interactive-guides/circuit-breaker/check-balance-fail-with-open-circuit.html",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                  },
                  {
                    "displayType":"pod",
                    "size": "40%",
                    "callback": "(function test(pod) {circuitBreakerCallBack.hidePod(pod); })"
                  }
                ]
              },
              {
                "name": "ConfigureDelayParams",
                "title": "Configure Delay",
                "description": [
                    "By default, the circuit will remain open for 5000 ms. During this period, all requests to the main service will be blocked and will fail immediately. At the end of this period, the circuit will transition to the half-open state and check if the main service is healthy. This time period can be configured with the delay parameter.",
                    "<br/><ul><li><b>delay:</b> The delay in milliseconds after the circuit opens until checking the main service's availability.</li></ul>",
                    "Suppose we shorten the delay in our @CircuitBreaker annotation to 3000 ms.",
                    "<samp>@CircuitBreaker(requestVolumeThreshold=8, failureRatio=0.25, <b>delay=3000</b>)</samp>"
                ],
                "instruction": [
                  "Click on the <action name='Refresh button' callback=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureDelayParams')\"><b>Refresh button</b></action> in the browser below to see how the above annotation affects the Check Balance call."
                ],
                "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "https://global-ebank.com/checkBalance",
                    "browserContent": "../../../html/interactive-guides/circuit-breaker/check-balance-fail-with-open-circuit.html",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                  },
                  {
                    "displayType":"pod"
                  }
                ]
            },
            {
              "name": "ConfigureSuccesThreshold",
              "title": "Configure Success Threshold",
              "description": [
                  "When the circuit is half-open, requests to the microservice are allowed through. However, if a request should fail while the circuit is half-open, the request will immediately fail and the circuit will return to an open state. Otherwise, if a specified number of consecutive requests succeed, the microservice is deemed healthy and the circuit will close.",
                  "The default number of consecutive successes needed is 1, and can be adjusted with the successThreshold parameter.",
                  "<br/><ul><li><b>successThreshold:</b> The number of consecutive successful invocations of the service required before closing the circuit.</ul>",
                  "Suppose we change the @CircuitBreaker annotation to require 2 successful requests.",
                  "<samp>@CircuitBreaker(requestVolumeThreshold=8, failureRatio=0.25, delay=3000, <b>successThreshold=2</b>)</samp><br/>"
              ],
              "instruction": [
                "Click the <action name='Refresh button' callback=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureSuccesThreshold')\"><b>Refresh button</b></action> in the browser below to see the first Check Balance call succeed in the half-open circuit state.<br>",
                "Click the <action name='Refresh button' callback=\"circuitBreakerCallBack.refreshButtonBrowser('ConfigureSuccesThreshold')\"><b>Refresh button</b></action> in the browser again. This second successful call meets our success threshold and closes the circuit."
              ],
              "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "https://global-ebank.com/checkBalance",
                    "browserContent": "../../../html/interactive-guides/circuit-breaker/check-balance-fail-with-open-circuit.html",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserFromHalfOpenCircuit(webBrowser); })"
                  },
                  {
                    "displayType":"pod"
                  }
              ]
            }
          ]
        },
        {
            "name": "AddFallBack",
            "title": "Add @Fallback Annotation",
            "description": [
              "Using the @Fallback annotation, add a fallback method that will execute when the Check Balance microservice is down and the circuit is in an open state. Our fallback method will invoke the bank's Balance Snapshot microservice to return a cached value of the user's balance."
            ],
            "instruction": [
              "<br/>To identify the fallback method, add the following annotation to line 6 above the @CircuitBreaker annotation, or click:",
              "<action name='fallback annotation' callback=\"circuitBreakerCallBack.addFallbackAnnotation('AddFallBack')\"><b>@Fallback (fallbackMethod = \"fallbackService\")</b></action>",
              "<br/>Add the fallback method to the bottom of the class, or click:",
              "<action name='fallback method' callback=\"circuitBreakerCallBack.addFallbackMethod('AddFallBack')\"><b>private Service fallbackService() {\n      return balanceSnapshotService();\n}</b></action>",
              "</br>Note that the fallback method must accept the same arguments and have the same return type as the original method." ,
              "<br/>Click the <action name='Save' callback=\"circuitBreakerCallBack.saveButtonEditor('AddFallBack')\"><b>save button</b></action> on the upper left of the editor menu pane."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package com.ibm.websphere.restexamples;",
                    "import javax.ws.rs.GET;",
                    "import javax.ws.rs.Path;",
                    "",
                    "public class BankService {",
                    "",
                    "    @CircuitBreaker (successThreshold=4,requestVolumeThreshold=1,failureRatio=1,delay=1000)\"",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return BankingService();",
                    "    }",
                    "}"
                ],
                "readonly": "false",
                "save": true,
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForFallbackAnnotation(editor); })"
              },
              {
                "displayType":"pod"
              }
            ],
            "steps": [
              {
                "name": "fallbackService",
                "title": "Check Balance with Fallback",
                "description": [
                  "When the circuit is in an open state, the bank's Check Balance microservice fails right away and the fallback service is executed. The circuit will transition to a half-open state after the specified delay."
                ],
                "instruction": [
                  "Click on the <action name='Refresh' callback=\"circuitBreakerCallBack.refreshButtonBrowser('fallbackService')\"><b>refresh button</b></action> in the browser below to see the fallback method immediately invoked when the circuit is open.<br/>"
                ],
                "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "https://global-ebank.com/checkBalance",
                    "browserContent": "../../../html/interactive-guides/circuit-breaker/check-balance-fail-with-open-circuit.html",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFallbackSuccessBalance(webBrowser); })"
                  },
                  {
                      "displayType":"pod"
                  }
                ]
            }
            ]
        },

        {
            "name": "playground",
            "title": "Circuit Breaker Demo",
            "description": [
              "Now that you have learned about circuit breakers and fallbacks, you can explore the parameters in the @CircuitBreaker annotation and see the circuit in action.",
              "Here is a recap of the parameters:",
              "<ul>",
              "<li><b>requestVolumeThreshold</b>: The size of the rolling window used to determine the failure threshold. The default is 20.",
              "<li><b>failureRatio</b>: The minimum failure ratio in the rolling window to trigger the circuit breaker. The default is 0.5.",
              "<li><b>delay</b>: The delay in milliseconds to transition to a half-open state after the circuit is open. The default is 5000ms.",
              "<li><b>successThreshold</b>: The number of consecutive successful invocations of the service required before closing the circuit. The default is 1.",
              "</ul>"
            ],
            "instruction": [
              "<b>Modify the @CircuitBreaker parameters</b> and <b>save the file</b> in the editor to configure your circuit breaker.",
              "<br>You can simulate successful or failed requests to the microservice to see how the circuit state changes."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package com.ibm.websphere.restexamples;",
                    "import javax.ws.rs.GET;",
                    "import javax.ws.rs.Path;",
                    "",
                    "public class BankService {",
                    "",
                    "    @CircuitBreaker(requestVolumeThreshold=4,",
                    "                     failureRatio=0.5,",
                    "                     delay=3000,",
                    "                     successThreshold=4)",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return BankingService();",
                    "    }",
                    "}"
                ],
                "readonly": [
                    {
                        "from": "1",
                        "to": "6"
                    },
                    {
                        "from": "11",
                        "to": "15"
                    }
                ],
                  "save": true,
                  "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForCircuitBreakerAnnotationChanges(editor); })"
                },
                {
                  "displayType":"pod",
                  "content": "../../../html/interactive-guides/circuit-breaker/circuit-breaker-playground.html",
                  "callback": "(function(pod) {circuitBreakerCallBack.createCircuitBreaker(pod)})"
                }
              ]
        },
        {
            "name": "WhatNext",
            "title": "What's Next",
            "description": "Congratulations, you have learned how to use a circuit breaker and provide a fallback to make your microservice fault tolerant."
        }
    ]
}
