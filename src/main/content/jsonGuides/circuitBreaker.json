{
    "name": "CircuitBreaker",
    "title": "@CircuitBreaker for Fault Tolerance",
    "description": "Build a fault tolerant microservice ...",
    "duration": "10 minutes",
    "audience": "developer",
    "steps": [
        {
            "name": "Intro",
            "title": "Introduction",
            "description": ["It is important to build microservices to be fault tolerant for resilience against failure. Fault tolerance is about using different strategies to ensure reduced impact and continued operation of service in the event of failure. <a href='https://microprofile.io/' target='_blank'>MicroProfile</a> makes this very simple with their fault tolerance feature.<br>",
            "In this guide, we will introduce the circuit breaker and fallback concepts and show how to implement them using the MicroProfile fault tolerance feature.<br>",
            "To get started, add the <b>mpFaultTolerance-1.0</b> feature to your server.xml.",
            "<pre>&lt;featureManager&gt;",
                "\t&lt;feature&gt;mpFaultTolerance-1.0&lt;/feature&gt;",
            "&lt;/featureManager&gt;</pre>"],
            "displayType": "none"
        },
        {
          "name": "Background",
          "title": "Background Concepts",
          "description": ["We will be using MicroProfile's <b>@CircuitBreaker</b> and <b>@Fallback</b> policies for our fault tolerance implementation.<br>",
          "<b>@CircuitBreaker</b> allows us to fail fast by automatically failing executions to prevent system overload, indefinite wait, or client timeout.",
          "<b>@Fallback</b> provides an alternate solution for the failed execution."],
          "displayType": "none",
          "steps": [
            {
              "name": "CircuitBreaker",
              "title": "Circuit Breaker",
              "description": [
                  "The circuit breaker design pattern allows your microservice to fail immediately to prevent repeated executions that are likely to fail.<br>",
                  "The software circuit breaker operates much like an electrical circuit breaker. A <b>closed</b> circuit represents a fully functional system, and an <b>open</b> circuit represents an incomplete system. In the event of failure, the circuit breaker triggers to open the circuit, removing the point of failure from the system.<br>",
                  "In a software circuit breaker, there is an additional <b>half-open</b> state. Once the circuit is opened, it will periodically switch to the half-open state, where it will check if the service is back up and close the circuit once it is considered safe and functional."
                ],
                "content": [
                  {
                    "displayType":"pod",
                    "content": "../../../html/guides/circuitBreaker/CircuitBreakerStateDiagram.html"
                  }
                ]
            },
            {
              "name": "Fallback",
              "title": "Fallback",
              "description": [
                "A fallback service runs when the main service fails. When used in conjunction with other fault tolerant design patterns, a fallback can provide graceful failure or continued or partial operation of the original service.<br>",
                "In our example, we will be using a fallback with a circuit breaker. When the main service fails and triggers the circuit breaker to open the circuit, subsequent requests for the service will be routed to the fallback service until the main service is restored."
              ],
              "content": [
                {
                    "displayType":"pod",
                    "content": "../../../html/guides/circuitBreaker/FallbackWithOverlay.html"
                }
              ]
            }
          ]
        },
        {
            "name": "Scenario",
            "title": "Example: Bank Scenario",
            "description": [
                "Imagine that your online banking application has many different microservices:",
                "a service for checking your balance, a service for transferring money, a service for depositing money, and a balance caching service to use for backup.<br/>",
                "On the next step, you will try to check your balance on the bank's website."
            ],
            "content": [
              {
                "displayType":"pod",
                "content": "<div><img src='../../../html/guides/circuitBreaker/images/BankScenario.png' alt='Online Banking Microservices' width='600' height='200'></div>"
              }
            ],
            "steps": [
                {
                    "name": "CheckBalance",
                    "title": "Check Your Balance",
                    "description": [
                      "Visit your bank's website by <font color='blue'>typing <b>http://localhost:9080/RestServicesSamples/banking/checkBalance</b></font> into the browser URL and then <font color='blue'>press <b>Enter</b></font>."
                    ],
                    "content":[
                      {
                        "displayType":"webBrowser",
                        "url": "",
                        "browserContent": "",
                        "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                      },
                      {
                        "displayType":"pod"
                      }
                    ]
                }
            ]
        },
        {
            "name": "AfterAddCircuitBreakerAnnotation",
            "title": "Add @CircuitBreaker Annotation",
            "description": [
                "Let us add a @CircuitBreaker annotation to apply the CircuitBreaker policy to the checkBalance microservice. The @CircuitBreaker annotation has four optional parameters and they are<br/>",
                "requestVolumeThreshold: The number of consecutive requests in a rolling window that will trip the circuit. The default is 20.",
                "failureRatio: The failure threshold to trigger the circuit to open. If the requestVolumeThreshold is 20 and the failureRatio is .50, 10 failures in 20 consecutive requests will trigger the circuit to open. The default is .50.",
                "delay: The delay to transition to half-open after the circuit is open. The default is 5000ms.",
                "successThreshold: In a half-open circuit, once the successThreshold is reached, the circuit is back to closed again. The default is 1.",
                "<br/>The @CircuitBreaker annotaion you are going to add will use low threshold values to show how the circuit goes through its three states.",
                "<br/><font color='blue'>Type the following @CircuitBreaker annotation on line 6 above the checkBalance service:</font><pre><b>@CircuitBreaker (successThreshold=2,requestVolumeThreshold=2,failureRatio=0.5,delay=2000)</b></pre>",
                "<font color='blue'>Click the <b>save button</b> on the upper left of the editor menu pane.</font><br/>"
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package com.ibm.websphere.restexamples;",
                    "import javax.ws.rs.GET;",
                    "import javax.ws.rs.Path;",
                    "",
                    "public class BankService {",
                    "",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return checkBalanceService();",
                    "    }",
                    "}"
                ],
                "readonly": false,
                "save": true,
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForCircuitBreakerAnnotation(editor); })"
              },
              {
                "displayType":"pod"
              }
            ],
            "steps": [
              {
                "name": "ClosedCircuit",
                "title": "Closed Circuit",
                "description": [
                  "The circuit for Check Balance microservice is initially in closed state until calls to the service start to fail. Recall that this is our @CircuitBreaker annotation",
                  "<br/>@CircuitBreaker (successThreshold=2,requestVolumeThreshold=2,failureRatio=0.5,delay=2000)",
                  "<br/>The circuit for the Check Balance microservice will stay closed until the service fails once. Let us see what happen when a request to a closed circuit fails.",
                  "<br/><font color='blue'>Click on the <b>refresh button</b> in the browser</font>.<br/>"
                ],
                "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "http://localhost:9080/RestServicesSamples/banking/checkBalance",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                  },
                  {
                    "displayType":"pod"
                  }
                ]
              },
              {
                "name": "OpenCircuit",
                "title": "Open Circuit",
                "description": [
                    "Now that the circuit for the Check Balance microservice is in open state, the circuit will remain open for 2000 ms.",
                    "<br/><font color='blue'>Click on the <b>refresh button</b> in the browser</font> to see the Check Balance call in a open circuit."
                ],
                "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "http://localhost:9080/RestServicesSamples/banking/checkBalance",
                    "browserContent": "Replace with pod container",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                  },
                  {
                    "displayType":"pod"
                  }
                ]
            },
            {
              "name": "HalfOpenCircuit",
              "title": "Half-Open Circuit",
              "description": ["After the Check Balance microservice staying in the open circuit for 2000 ms, the circuit transitions to half open state. Again recall that this is our CircuitBreaker policy",
                  "<br/>@CircuitBreaker (successThreshold=2,requestVolumeThreshold=2,failureRatio=0.5,delay=2000)",
                  "<br/>In a half-open circuit, it allows requests to the Check Balance service and keeps record of consecutive successful invocations before going back to closed state. If a request to the Check Balance service fails while its circuit is in half-open state, the circuit will go back to the open state.",
                  "<font color='blue'>Click on the <b>refresh button</b> in the browser</font> to see the Check Balance call fails in a half-open circuit.",
                  "<br/>After waiting for 2000ms in open state, the circuit is back to half-open state.",
                  "<font color='blue'>Click on the <b>refresh button</b> again in the browser</font> to see the Check Balance call succeeds in a half-open circuit.",
                  "<font color='blue'>Click on the <b>refresh button</b> one last time in the browser</font> to see the Check Balance call succeeds in a half-open circuit."
              ],
              "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "http://localhost:9080/RestServicesSamples/banking/checkBalance",
                    "browserContent": "Replace with pod container",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserFromHalfOpenCircuit(webBrowser); })"
                  },
                  {
                    "displayType":"pod"
                  }
              ]
            }
          ]
        },
        {
            "name": "AddFallBack",
            "title": "Add @Fallback Annotation",
            "description": [
              "Using the @Fallback annotation, add a fallback service that will execute when the Check Balance microservice is down and the circuit is in an open state. The fallback service will invoke the bank's Balance Cache mircroservice to return a cached value of the user's balance.",
              "<br/><font color='blue'>Proceed by adding an annotation to line 6 above the @CircuitBreaker annotation: </font>",
              "<pre><b>@Fallback (fallbackMethod = \"fallbackService\")</b></pre><font color='blue'>Add the following method to the bottom of the class:</font>",
              "<pre><b>private Service fallbackService() {</b>",
              "<b>        return cachedService();</b>",
              "<b>}</b></pre>and then <font color='blue'>click the <b>save button</b></font>."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package com.ibm.websphere.restexamples;",
                    "import javax.ws.rs.GET;",
                    "import javax.ws.rs.Path;",
                    "",
                    "public class BankService {",
                    "",
                    "    @CircuitBreaker (successThreshold=4,requestVolumeThreshold=1,failureRatio=1,delay=1000)\"",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return BankingService();",
                    "    }",
                    "}"
                ],
                "readonly": "false",
                "save": true,
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForFallbackAnnotation(editor); })"
              },
              {
                "displayType":"pod"
              }
            ],
            "steps": [
              {
                "name": "cachedService",
                "title": "Cache Service",
                "description": [
                  "Click on the <b>refresh button</b> in the browser.<br/>",
                  "Since the circuit is in open state, the bank's Check Balance microservice will fail right away and the fallback service will be executed. The circuit will transition to half-open after the delay."
                ],
                "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "http://localhost:9080/RestServicesSamples/banking/checkBalance",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFallbackSuccessBalance(webBrowser); })"
                  },
                  {
                      "displayType":"pod"
                  }
                ]
            }
            ]
        },

        {
            "name": "playground",
            "title": "Configure your own Circuit Breaker",
            "description": [
              "Since you've learned what a circuit breaker and a fallback are, now you can test configuring the parameters in the circuit breaker annotation and see the circuit in action.",
              "Here's a recap of what the parameters mean:",
              "<b>successThreshold</b>: How many requests need to be successful while in half-open state to switch to closed state.",
              "<b>requestVolumeThreshold</b>: The window of requests that can fail before the circuit switches from closed to open.",
              "<b>failureRatio</b>: What percentage of the requestVolumeThreshold requests need to fail before the circuit switches from closed to open state.",
              "<b>delay</b>: How long the circuit stays in the open state before switching to the half-open state.",
              "",
              "<b>Modify the 4 parameters for the Circuit Breaker annotation and click save</b> to see the Circuit Breaker configured by your parameters.",
              "After you change the annotation, you can control what happens in the circuit by making requests to the microservice succeed or fail and see the state of the circuit change."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package com.ibm.websphere.restexamples;",
                    "import javax.ws.rs.GET;",
                    "import javax.ws.rs.Path;",
                    "",
                    "public class BankService {",
                    "",
                    "    @CircuitBreaker (successThreshold=4,requestVolumeThreshold=4,failureRatio=.5,delay=3000)",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return BankingService();",
                    "    }",
                    "}"
                ],
                "readonly": [
                    {
                        "from": "1",
                        "to": "6"
                    },
                    {
                        "from": "8",
                        "to": "12"
                    }
                ],
                  "save": true,
                  "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForCircuitBreakerAnnotationChanges(editor); })"
                },
                {
                  "displayType":"pod",
                  "content": "../../../html/guides/circuitBreaker/circuitBreakerPlayground.html"
                }
              ]
        },
        {
            "name": "WhatNext",
            "title": "What's Next",
            "description": "Congratulations, you have learned how to use a circuit breaker and provide a fallback to make your microservice fault tolerant."
        }
    ]
}
