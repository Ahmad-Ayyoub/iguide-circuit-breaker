{
    "name": "CircuitBreaker",
    "title": "Circuit Breaker Guide",
    "description": "Build a fault tolerant microservice ...",
    "duration": "10 minutes",
    "audience": "developer",
    "steps": [
        {
            "name": "Intro",
            "title": "Introduction",
            "description": "Building a fault tolerant microservice is important so that it is resilient in the case of failure. If a  microservice fails, then it is important to have a circuit breaker to prevent unsuccessful attempts. If the retry fails, then the microservice should have a fallback solution to execute.",
            "displayType": "none"
        },
        {
            "name": "Scenario",
            "title": "Bank Scenario",
            "description": [
                "Imagine that your bank has many different microservices:",
                "A service for checking your balance, a service for withdrawing money, a service for depositing money, and a cache service.",
                "On the next step, you will try to check your balance on the bank's website."
            ],
            "content": [
              {
                "displayType":"pod",
                "display":"Show diagram here."
              }
            ],
            "steps": [
                {
                    "name": "CheckBalance",
                    "title": "Check Balance",
                    "description": "Visit your bank's website by typing http://localhost:9080/RestServicesSamples/banking/checkBalance into the browser URL and then press enter.",
                    "content":[
                      {
                        "displayType":"webBrowser",
                        "url": "",
                        "browserContent": "",
                        "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                      }
                    ]
                }
            ]
        },
        {
            "name": "CircuitBreaker",
            "title": "Circuit Breaker",
            "description": [
                "A circuit breaker allows your microservice to fail immediately when it is down so additional attempts will not have to wait to know that it is down.",
                "A circuit will remain closed and run the microservice until it fails.",
                "When the service fails, the circuit goes into an open state for a set delay period and any attempt to call the service will fail.",
                "After the delay, the circuit switches to a half-opened state. It will allow requests to the main service again and take <successThreshold> successful attempts before the circuit is closed again.",
                "If it fails before then, the circuit goes back into an open state and is down for the set delay."
              ],
            "steps": [
              {
                  "name": "AfterAddCircuitBreakerAnnotation",
                  "title": "Add Circuit Breaker Annotation",
                  "description": [
                      "Add a circuit breaker annotation to the bank's checkBalance microservice to enable the circuit breaker.",
                      "Type in \"@CircuitBreaker (successThreshold=4,requestVolumeThreshold=1,failureRatio=1,delay=1000)\" above the checkBalance method",
                      "then click the save button."
                  ],
                  "content":[
                    {
                      "displayType":"fileEditor",
                      "fileName": "BankService.java",
                      "preload": [
                          "package com.ibm.websphere.restexamples;",
                          "import javax.ws.rs.GET;",
                          "import javax.ws.rs.Path;",
                          "",
                          "public class BankService {",
                          "",
                          "    public Service checkBalance() {",
                          "        counterForInvokingBankingService++;",
                          "        return checkBalanceService();",
                          "    }",
                          "}"
                      ],
                      "readonly": false,
                      "save": true
                    }
                  ]
              },
              {
                  "name": "OpenCircuit",
                  "title": "Open circuit",
                  "description": [
                      "Click on refresh button"
                  ],
                  "content":[
                    {
                      "displayType":"webBrowser",
                      "url": "http://localhost:9080/RestServicesSamples/banking/checkBalance",
                      "browserContent": "Replace with pod container",
                      "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                    }
                  ]
              }
            ]
        },
        {
            "name": "Fallback",
            "title": "Fallback",
            "description": "A fallback another microservice that runs when your main service fails. In conjunction with a circuit breaker, a fallback is used for the whole delay while the circuit is in the open state and any requests that come to the main service are diverted to the fallback.",
            "steps": [
              {
                  "name": "AddFallBack",
                  "title": "Add Fallback",
                  "description": [
                    "You will add a fallback service named cachedService that will run whenever the checkBalance service is down and the circuit is in an open state.",
                    "Proceed by adding an annotation to the checkBalance service: @Fallback (fallbackMethod = \"fallbackService\")",
                    "Add the following method to the code:",
                    "public Service fallbackService() {",
                    "        return cachedService();",
                    "}",
                    "and then click save."
                  ],
                  "content":[
                    {
                      "displayType":"fileEditor",
                      "fileName": "BankService.java",
                      "preload": [
                          "package com.ibm.websphere.restexamples;",
                          "import javax.ws.rs.GET;",
                          "import javax.ws.rs.Path;",
                          "",
                          "public class BankService {",
                          "",
                          "    @CircuitBreaker (successThreshold=10,requestVolumeThreshold=4,failureRatio=0.50,delay=1000)\"",
                          "    public Service checkBalance() {",
                          "        counterForInvokingBankingService++;",
                          "        return BankingService();",
                          "    }",
                          "}"
                      ],
                      "readonly": "false",
                      "save": true
                    },
                    {
                      "displayType":"webBrowser",
                      "url": "Replace widget with pod"
                    }
                  ]
              },
              {
                  "name": "cachedService",
                  "title": "Cached Service",
                  "description": [
                    "Click on refresh in the browser."
                  ],
                  "content":[
                    {
                      "displayType":"webBrowser",
                      "url": "http://localhost:9080/RestServicesSamples/banking/checkBalance",
                      "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFallbackSuccessBalance(webBrowser); })"
                    }
                  ]
              }
            ]
        },
        {
            "name": "WhatNext",
            "title": "What's Next",
            "description": "Congratulations, you have learned how to use a circuit breaker and provide a fallback to make your microservice fault tolerance."
        }
    ]
}
