{
    "name": "CircuitBreaker",
    "title": "Circuit Breaker Guide",
    "description": "Build a fault tolerant microservice ...",
    "duration": "10 minutes",
    "audience": "developer",
    "steps": [
        {
            "name": "Intro",
            "title": "Introduction",
            "description": "Building a fault tolerant microservice is important so that it is resilient in the case of failure. If a  microservice fails, then it is important to have a circuit breaker to prevent unsuccessful attempts. If the retry fails, then the microservice should have a fallback solution to execute.",
            "displayType": "none"
        },
        {
          "name": "Background",
          "title": "Background Concepts",
          "description": "...",
          "displayType": "none",
          "steps": [
            {
              "name": "CircuitBreaker",
              "title": "Circuit Breaker",
              "description": [
                  "A circuit breaker allows your microservice to fail immediately when it is down so additional attempts will not have to wait to know that it is down.",
                  "A circuit will remain closed and run the microservice until it fails.",
                  "When the service fails, the circuit goes into an open state for a set delay period and any attempt to call the service will fail immediately.",
                  "After the delay, the circuit switches to a half-opened state. It will allow requests to the main service again and take <successThreshold> successful attempts before the circuit is closed again.",
                  "If it fails before then, the circuit goes back into an open state and is down for the set delay."
                ],
                "content": [
                  {
                    "displayType":"pod",
                    "content": "../../../html/guides/circuitBreaker/CircuitBreakerStateDiagram.html"
                  }
                ]
            },
            {
              "name": "Fallback",
              "title": "Fallback",
              "description": "",
              "content": [
                {
                    "displayType":"pod",
                    "content": "../../../html/guides/circuitBreaker/FallbackWithOverlay.html"
                }
              ]
            }
          ]
        },
        {
            "name": "Scenario",
            "title": "Example: Bank Scenario",
            "description": [
                "Imagine that your online banking application has many different microservices:",
                "a service for checking your balance, a service for transferring money, a service for depositing money, and a balance caching service to use for backup.<br/>",
                "On the next step, you will try to check your balance on the bank's website."
            ],
            "content": [
              {
                "displayType":"pod",
                "content": "<div><img src='../../../html/guides/circuitBreaker/images/BankScenario.png' alt='Online Banking Microservices' width='600' height='200'></div>"
              }
            ],
            "steps": [
                {
                    "name": "CheckBalance",
                    "title": "Check Balance",
                    "description": [
                      "Visit your bank's website by typing <b>http://localhost:9080/RestServicesSamples/banking/checkBalance</b> into the browser URL and then press <b>Enter</b>."
                    ],
                    "content":[
                      {
                        "displayType":"webBrowser",
                        "url": "",
                        "browserContent": "",
                        "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                      },
                      {
                        "displayType":"pod"
                      }
                    ]
                }
            ]
        },
        {
            "name": "AfterAddCircuitBreakerAnnotation",
            "title": "Add @CircuitBreaker Annotation",
            "description": [
                "Add a circuit breaker annotation to the bank's checkBalance microservice to enable the circuit breaker.",
                "<br/><font color='blue'>Type the following @CircuitBreaker annotation to line 6 above the bank's checkBalance microservice:</font><pre><b>@CircuitBreaker (successThreshold=4,requestVolumeThreshold=2,failureRatio=0.5,delay=1000)</b></pre>",
                "<font color='blue'>Click the <b>save button</b> on the upper left of the editor menu pane.</font><br/>",
                "The circuit will open when 1 (1 requestVolumeThreshold x0.50 failureRatio) failure occurs among the rolling window of 2 consecutive invocations.",
                "The circuit will stay open for 1000ms and then transition to half open.",
                "After 4 consecutive successful invocations, the circuit will be back to close again."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package com.ibm.websphere.restexamples;",
                    "import javax.ws.rs.GET;",
                    "import javax.ws.rs.Path;",
                    "",
                    "public class BankService {",
                    "",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return checkBalanceService();",
                    "    }",
                    "}"
                ],
                "readonly": false,
                "save": true,
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForCircuitBreakerAnnotation(editor); })"
              },
              {
                "displayType":"pod"
              }
            ],
            "steps": [
              {
                "name": "OpenCircuit",
                "title": "Open Circuit",
                "description": [
                    "The circuit breaker keeps a count of the failed attempts. Using previous @CircuitBreaker annotation,<br/>",
                    "@CircuitBreaker (successThreshold=4,requestVolumeThreshold=2,failureRatio=0.5,delay=1000),",
                    "<br/>the circuit for the checkBalance service will be opened after one fail attempt is reached. The circuit will remain open for 1000ms. During the open state, any attempt to call the checkBalance service will fail immediately.",
                    "<br/>Since the @CircuitBreaker annotation is implemented, a call has made to the checkBalance service and fails. The circuit is in open state.",
                    "<font color='blue'>Click on the <b>refresh button</b> in the browser</font> to see the request failed in an open circuit.<br/>"
                ],
                "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "http://localhost:9080/RestServicesSamples/banking/checkBalance",
                    "browserContent": "Replace with pod container",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFailBalance(webBrowser); })"
                  },
                  {
                    "displayType":"pod"
                  }
                ]
            },
            {
              "name": "HalfOpenCircuit",
              "title": "Half-Open Circuit",
              "description": ["After the checkBalance service staying in the open circuit for 1000 ms, it switches to a half-open state.",
                  "In a half-open circuit, it allows requests to the checkBalance service and keep record of consecutive successful counts before going back to closed state. If a request fails while the checkBalance service is in half-open state, the circuit will go back to the open state."
              ]
            },
            {
              "name": "ClosedCircuit",
              "title": "Closed Circuit",
              "description": ["Using earlier @CircuitBreaker annotation,",
                  "<br/>@CircuitBreaker (successThreshold=4,requestVolumeThreshold=2,failureRatio=0.5,delay=1000),",
                  "<br/>the circuit for the checkBalance service will be closed after four consecutive successful calls.",
                  "<br/>Since the circuit for the checkBalance service is in half-open state, three consecutive check balance transations have run successfully.",
                  "<br/><font color='blue'>Click on the <b>refresh button</b> in the browser</font>.<br/>",
                  "The service runs successfully. As this is the fourth successful calls, the circuit is now closed."
              ],
              "content":[
                {
                  "displayType":"webBrowser",
                  "url": "http://localhost:9080/RestServicesSamples/banking/checkBalance",
                  "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForSuccessBalance(webBrowser); })"
                },
                {
                    "displayType":"pod"
                }
              ]
            }
          ]
        },
        {
            "name": "AddFallBack",
            "title": "Add Fallback Annotation",
            "description": [
              "You will add a fallback service named cachedService that will run whenever the checkBalance service is down and the circuit is in an open state.",
              "Proceed by adding an annotation to line 6 above the @CircuitBreaker annotation: ",
              "<pre><b>@Fallback (fallbackMethod = \"fallbackService\")</b></pre>Add the following method to the bottom of the class:",
              "<pre><b>public Service fallbackService() {</b>",
              "<b>        return cachedService();</b>",
              "<b>}</b></pre>and then click the <b>save button</b>."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package com.ibm.websphere.restexamples;",
                    "import javax.ws.rs.GET;",
                    "import javax.ws.rs.Path;",
                    "",
                    "public class BankService {",
                    "",
                    "    @CircuitBreaker (successThreshold=4,requestVolumeThreshold=1,failureRatio=1,delay=1000)\"",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return BankingService();",
                    "    }",
                    "}"
                ],
                "readonly": "false",
                "save": true,
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForFallbackAnnotation(editor); })"
              },
              {
                "displayType":"pod"
              }
            ],
            "steps": [
              {
                "name": "cachedService",
                "title": "Cache Service",
                "description": [
                  "Click on the <b>refresh button</b> in the browser.<br/>",
                  "Since the circuit is in open state, the service will fail right away but the fallback service will be executed. The circuit will transition to half-open after the delay."
                ],
                "content":[
                  {
                    "displayType":"webBrowser",
                    "url": "http://localhost:9080/RestServicesSamples/banking/checkBalance",
                    "callback": "(function test(webBrowser) {circuitBreakerCallBack.listenToBrowserForFallbackSuccessBalance(webBrowser); })"
                  },
                  {
                      "displayType":"pod"
                  }
                ]
            }
            ]
        },
              
        {
            "name": "playground",
            "title": "Configure your own Circuit Breaker",
            "description": [
              "Since you've learned what a circuit breaker and a fallback are, now you can test configuring the parameters in the circuit breaker annotation and watch the circuit get updated live.",
              "Modify the 4 different parameters above the checkBalance service.",
              "Here's a recap of what the parameters mean:",
              "<b>successThreshold</b>: How many requests need to be successful while in half-open state to switch to closed state.",
              "<b>requestVolumeThreshold</b>: The window of requests that can fail before the circuit switches from closed to open.",
              "<b>failureRatio</b>: What percentage of the requestVolumeThreshold requests need to fail before the circuit switches from closed to open state.",
              "<b>delay</b>: How long the circuit stays in the open state before switching to the half-open state.",
              "",
              "Modify the parameters for the Circuit Breaker and click save to see the Circuit Breaker get updated live."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "BankService.java",
                "preload": [
                    "package com.ibm.websphere.restexamples;",
                    "import javax.ws.rs.GET;",
                    "import javax.ws.rs.Path;",
                    "",
                    "public class BankService {",
                    "",
                    "    @CircuitBreaker (successThreshold=4,requestVolumeThreshold=1,failureRatio=1,delay=1000)\"",
                    "    public Service checkBalance() {",
                    "        counterForInvokingBankingService++;",
                    "        return BankingService();",
                    "    }",
                    "}"
                ],
                "readonly": "false",
                "save": true,
                "callback": "(function test(editor) {circuitBreakerCallBack.listenToEditorForCircuitBreakerAnnotationChanges(editor); })"
              },
              {
                "displayType":"pod",
                "content": "../../../html/guides/circuitBreaker/circuitBreakerPlayground.html"
              }
            ]
        },
        {
            "name": "WhatNext",
            "title": "What's Next",
            "description": "Congratulations, you have learned how to use a circuit breaker and provide a fallback to make your microservice fault tolerant."
        }
    ]
}
